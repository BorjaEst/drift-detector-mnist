"""Testing module for api predictions. This is a test file designed to use
pytest and prepared for some basic assertions and to add your own tests.

You can add new tests using the following structure:
```py
def test_{description for the test}(metadata):
    # Add your assertions inside the test function
    assert {statement_1 that returns true or false}
    assert {statement_2 that returns true or false}
```
The conftest.py module in the same directory includes the fixture to return
to your tests inside the argument variable `metadata` the value generated by
your function defined at `api.get_metadata`.

If your file grows in complexity, you can split it into multiple files in
the same folder. However, remember to add the prefix `test_` to the file.
"""

# pylint: disable=redefined-outer-name
# pylint: disable=unused-argument


def test_detection_type(predictions):
    """Tests that detection return is dict type."""
    assert isinstance(predictions, dict)


def test_observed_statistic(predictions):
    """Tests that detection logs has MMD value for distance."""
    assert "observed_statistic" in predictions
    assert isinstance(predictions["observed_statistic"], float)
    assert predictions["observed_statistic"] > 0.0
    assert predictions["observed_statistic"] < 1.0


def test_permuted_statistics(predictions):
    """Tests that detection logs have permuted_statistics."""
    assert "permuted_statistics" in predictions
    assert isinstance(predictions["permuted_statistics"], list)


def test_p_value(predictions):
    """Tests that detection logs have probability value."""
    assert "p_value" in predictions
    assert isinstance(predictions["p_value"], float)
    assert predictions["p_value"] > 0.0
    assert predictions["p_value"] < 1.0
